#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'Michał Leśniewski'
__contact__ = 'm.lesniewski@samsung.com'
__version__ = '0.1a'

import argparse
import os

def main():
	try:
		parser = argparse.ArgumentParser(description='Create or analyze ADBI injectacle files.')
		parser.add_argument('-V', '--version', action='version',
                            version="%(prog)s (ADBI 3.0 project) " + __version__)

		parser.add_argument('input', type=str, help='input file name')
		parser.add_argument('name', type=str, help='symbol file name')

		args = parser.parse_args();

		output = args.input + '.c'
		name = args.name.strip()

		with open(output, 'w') as outfile:

			length = 0

			outfile.write('/* WARNING: This file was generated automatically. */\n\n')
			outfile.write('#include "injectable/injectable.h"\n\n')
			outfile.write('static char %s_data [] = {\n' % name)

			with open(args.input, 'rb') as infile:
				data = infile.read()

			ascii = ''
			line = ''

			for n, c in enumerate(data):
				if n % 16 == 0:
					if line:
						outfile.write('   /* %6x */  %-96s  //  | %s | \n' % (n - 16, line, ascii))
						ascii = ''
						line = ''				
				line += '0x%02x, ' % ord(c)
				ascii += c if 32 <= ord(c) < 127 else '.'
			outfile.write('   /* %6x */  %-96s  //  | %s |' % (n - 16, line, ascii))
			outfile.write('\n};\n\n')
			outfile.write('injectable_t * %s_get(void) {\n' % name)
			outfile.write('    static injectable_t * inj = NULL;\n')
			outfile.write('    if (!inj)\n')
			outfile.write('        inj = injectable_init_builtin((void *) %s_data, %i);\n' % (name, len(data)))
			outfile.write('	   return inj;\n')
			outfile.write('}\n\n')

	except KeyboardInterrupt:
		print 'Aborted.'

	except IOError, e:
		print e
		raise SystemExit(1)

main()
